#!/usr/bin/env bash

BASE_DIR=$(realpath "$(dirname "$0")"/..)
JAVA_BASE_DIR="$BASE_DIR/mama-module"
JAVA_PROJ_DIR="$BASE_DIR/mama-module/java-cep"
PY_DIR="$BASE_DIR/python"
DEPLOYING_DIR="$BASE_DIR/deploying"
MONITORING_DIR="$BASE_DIR/mama-module/monitoring"

wait_until_middle_of_minute() {
  seconds_on_clock=$(date "+%-S")
  time_to_30s=$(( (( 30 - seconds_on_clock ) + 60 ) % 60 ))
  sleep $time_to_30s
}

usage() {
  echo "Usage: run INPUT_DIR OUTPUT_DIR TRACE_DIR N [RUN_DURATION]";
  echo "Deploys configs and runs all nodes."
  echo "INPUT_DIR: path to a folder with config_*.json and trace_*.json for each node";
  echo "TRACE_DIR: path to a folder with trace_*.csv for each node";
  echo "N: number of nodes";
  echo "RUN_DURATION: sleep time, i.e. expected duration (default is 10m)";
  echo "";
}

if (( $# < 4 )); then
  usage
  exit 1
fi;

INPUT_DIR="$(realpath $1)"
output_dir="$2"
if [ ! -d "$2" ]; then
  echo "OUTPUT_DIR does not exist. Creating..."
  mkdir -p "$2"
fi;
OUTPUT_DIR=$2
TRACE_DIR=$(realpath $3)
N_NODES=$(($4))
RUN_DURATION_MIN=${5:-10}

echo "INPUT_DIR: $INPUT_DIR"
echo "OUTPUT_DIR: $OUTPUT_DIR"
echo "TRACE_DIR: $TRACE_DIR"
echo "N_NODES: $N_NODES"
echo "RUN_DURATION_MIN: $RUN_DURATION_MIN"

if [[ -z "$INPUT_DIR" || -z "$OUTPUT_DIR" || -z "$TRACE_DIR" || -z "$N_NODES" ]]; then
  usage
  exit 1
fi;

if [ -d "$OUTPUT_DIR" ]; then
  echo "Output directory already exists."
  # rm $OUTPUT_DIR/*.log
  # rm $OUTPUT_DIR/*.err
else
  mkdir -p "$OUTPUT_DIR"
  if [ $? -ne 0 ]; then
    echo "Failed to create output directory"
    exit 1
  fi;
fi;

#start all nodes
JAR="$JAVA_PROJ_DIR/target/java-cep-1.0-SNAPSHOT.jar"

for ((i=0; i<N_NODES; i++)); do
  echo "starting $i"
  java -ea --add-opens java.base/java.lang=ALL-UNNAMED \
           --add-opens=java.base/java.net=ALL-UNNAMED \
           --add-opens=java.base/java.util=ALL-UNNAMED \
           --add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED \
            -jar "$JAR" \
            -flinkconfig "$JAVA_PROJ_DIR/conf" \
            -localconfig "$INPUT_DIR/config_$i.json" \
            -globalconfig "$DEPLOYING_DIR/address_book_localhost.json" \
            -monitoringinputs "$INPUT_DIR/inequality_inputs.json" \
            -updatedrules "$INPUT_DIR/updated_forwared_rules.json" \
             | tee "$OUTPUT_DIR/$i.log" 2> >(tee "$OUTPUT_DIR/$i.err" >&2) &
             # >"$INPUT_DIR/$i.log" 2>"$INPUT_DIR/$i.err" &
done;

echo "waiting 10 sec for all nodes to start up..."
sleep 10
wait_until_middle_of_minute

#start input srcs
for ((i=0; i<N_NODES; i++)); do
  echo starting inputs on "$i"
  nohup python3 "$PY_DIR/send_eventstream.py" "$i" -f "$TRACE_DIR/trace_$i.csv" --address-book "$DEPLOYING_DIR/address_book_localhost.json" >>"$OUTPUT_DIR/py.log" 2>>"$OUTPUT_DIR/py.err" &
done

sleep  $((60 * RUN_DURATION_MIN))

#wait for process termination
ps aux | grep '[j]ava' | grep -v java-language-server | awk '{print $2}' | xargs kill -9 &&\
	ps aux | grep python | grep -v nvim | grep -v poetry | awk '{print $2}' | xargs kill -9
